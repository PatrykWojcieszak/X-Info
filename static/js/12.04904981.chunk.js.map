{"version":3,"sources":["Modules/Starlink/Starlink.module.scss","Queries/StarlinkQuery.ts","Store/Starlink/actions.ts","Modules/Starlink/Starlink.tsx"],"names":["module","exports","StarlinkQuery","query","longitude","$ne","options","pagination","fetchStarlink","dispatch","type","FETCH_STARLINK_START","axios","post","then","res","newStarlink","data","FETCH_STARLINK_SUCCESS","payload","catch","err","error","FETCH_STARLINK_FAIL","connect","state","starlinks","starlink","onFetchStarlink","props","useEffect","interval","setInterval","clearInterval","gData","docs","map","tle","spaceTrack","TLE_LINE0","substring","length","TLE_LINE1","TLE_LINE2","latLonObj","getLatLngObj","push","lat","lng","alt","radius","color","globe","globeImageUrl","pointsData","pointAltitude","pointColor","div","initial","animate","exit","variants","pageVariantsAnim","className","styles","Starlink","StarlinkInfo","target","rel","href"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,aAAe,iC,uICUxDC,EAXO,CACpBC,MAAO,CACLC,UAAW,CACTC,IAAK,OAGTC,QAAS,CACPC,YAAY,I,QC0BT,IAAMC,EAAgB,WAC3B,OAAO,SAACC,GACNA,EAvBK,CACLC,KAAMC,MAwBNC,IACGC,KACC,+CACAX,GAEDY,MAAK,SAACC,GAzBN,IACLC,EAyBMP,GAzBNO,EAyBoCD,EAAIE,KAvBjC,CACLP,KAAMQ,IACNC,QAASH,QAuBNI,OAAM,SAACC,GAnBP,IAA2BC,EAoB1Bb,GApB0Ba,EAoBCD,EAnB1B,CACLX,KAAMa,IACNJ,QAASG,UC6EEE,uBAZS,SAACC,GACvB,MAAO,CACLC,UAAWD,EAAME,SAASD,cAIH,SAACjB,GAC1B,MAAO,CACLmB,gBAAiB,kBAAMnB,EAASD,SAIrBgB,EAzFE,SAACK,GAAW,IACnBD,EAA+BC,EAA/BD,gBAAiBF,EAAcG,EAAdH,UAEzBI,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BJ,MACC,KAEH,OAAO,WACLK,cAAcF,MAEf,IAEH,IAAMG,EAAoB,GACtBR,GACFA,EAAUS,KAAKC,KAAI,SAACT,GAClB,IAKMU,GALI,OAAGV,QAAH,IAAGA,OAAH,EAAGA,EAAUW,WAAWC,UAAUC,UAC1C,EADW,OAEXb,QAFW,IAEXA,OAFW,EAEXA,EAAUW,WAAWC,UAAUE,SAK/B,OADA,OAEAd,QAFA,IAEAA,OAFA,EAEAA,EAAUW,WAAWI,WACrB,MAHA,OAIAf,QAJA,IAIAA,OAJA,EAIAA,EAAUW,WAAWK,WAEjBC,EAAYC,uBAAaR,GAE/BH,EAAMY,KAAK,CACTC,IAAKH,EAAUG,IACfC,IAAKJ,EAAUI,IACfC,IAAK,GACLC,OAAQ,IACRC,MAAO,aAKb,IAAIC,EAAQ,6BAaZ,OAXIlB,IACFkB,EACE,cAAC,IAAD,CACEC,cAAc,sDACdC,WAAYpB,EACZqB,cAAe,KACfC,WAAW,WAMf,eAAC,IAAOC,IAAR,CACEC,QAAQ,UACRC,QAAQ,KACRC,KAAK,MACLC,SAAUC,IACVC,UAAWC,IAAOC,SALpB,UAME,sBAAKF,UAAWC,IAAOE,aAAvB,UACE,0CACA,+BACE,yCADF,8DAEiB,IACf,mBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,iBAAlD,oBAEK,IALP,0CAQA,0DAA6BxC,EAAMH,UAAUS,KAAKM,aAEnDW","file":"static/js/12.04904981.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Starlink\":\"Starlink_Starlink__3XQrk\",\"StarlinkInfo\":\"Starlink_StarlinkInfo__pjfNh\"};","const StarlinkQuery = {\r\n  query: {\r\n    longitude: {\r\n      $ne: null,\r\n    },\r\n  },\r\n  options: {\r\n    pagination: false,\r\n  },\r\n};\r\n\r\nexport default StarlinkQuery;\r\n","import axios from \"axios\";\r\nimport IQueryResult from \"../../Models/IQueryResult\";\r\nimport IStarlink from \"../../Models/IStarlink\";\r\nimport StarlinkQuery from \"../../Queries/StarlinkQuery\";\r\nimport {\r\n  FETCH_STARLINK_START,\r\n  FETCH_STARLINK_SUCCESS,\r\n  FETCH_STARLINK_FAIL,\r\n  StarlinkTypes,\r\n} from \"./types\";\r\n\r\nexport function fetchStarlinkStart(): StarlinkTypes {\r\n  return {\r\n    type: FETCH_STARLINK_START,\r\n  };\r\n}\r\n\r\nexport function fetchStarlinkSuccess(\r\n  newStarlink: IQueryResult<IStarlink>\r\n): StarlinkTypes {\r\n  return {\r\n    type: FETCH_STARLINK_SUCCESS,\r\n    payload: newStarlink,\r\n  };\r\n}\r\n\r\nexport function fetchStarlinkFail(error: string): StarlinkTypes {\r\n  return {\r\n    type: FETCH_STARLINK_FAIL,\r\n    payload: error,\r\n  };\r\n}\r\n\r\nexport const fetchStarlink = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchStarlinkStart());\r\n\r\n    axios\r\n      .post<IQueryResult<IStarlink>>(\r\n        \"https://api.spacexdata.com/v4/starlink/query\",\r\n        StarlinkQuery\r\n      )\r\n      .then((res) => {\r\n        dispatch(fetchStarlinkSuccess(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(fetchStarlinkFail(err));\r\n      });\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { getLatLngObj } from \"tle.js\";\r\nimport Globe from \"react-globe.gl\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport styles from \"./Starlink.module.scss\";\r\nimport { motion } from \"framer-motion\";\r\nimport { pageVariantsAnim } from \"../../Animations/Animations_motion\";\r\nimport { fetchStarlink } from \"../../Store/Starlink/actions\";\r\ninterface IMapData {\r\n  lat: number;\r\n  lng: number;\r\n  alt: number;\r\n  radius: number;\r\n  color: string;\r\n}\r\n\r\nconst Starlink = (props) => {\r\n  const { onFetchStarlink, starlinks } = props;\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      onFetchStarlink();\r\n    }, 3000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  const gData: IMapData[] = [];\r\n  if (starlinks) {\r\n    starlinks.docs.map((starlink) => {\r\n      const TLE0 = starlink?.spaceTrack.TLE_LINE0.substring(\r\n        2,\r\n        starlink?.spaceTrack.TLE_LINE0.length\r\n      );\r\n\r\n      const tle =\r\n        TLE0 +\r\n        \" \\n\" +\r\n        starlink?.spaceTrack.TLE_LINE1 +\r\n        \"\\n\" +\r\n        starlink?.spaceTrack.TLE_LINE2;\r\n\r\n      const latLonObj = getLatLngObj(tle);\r\n\r\n      gData.push({\r\n        lat: latLonObj.lat,\r\n        lng: latLonObj.lng,\r\n        alt: 0.9,\r\n        radius: 0.01,\r\n        color: \"white\",\r\n      });\r\n    });\r\n  }\r\n\r\n  let globe = <></>;\r\n\r\n  if (gData) {\r\n    globe = (\r\n      <Globe\r\n        globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\r\n        pointsData={gData}\r\n        pointAltitude={0.001}\r\n        pointColor=\"color\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      initial=\"initial\"\r\n      animate=\"in\"\r\n      exit=\"out\"\r\n      variants={pageVariantsAnim}\r\n      className={styles.Starlink}>\r\n      <div className={styles.StarlinkInfo}>\r\n        <h2>STARLINK</h2>\r\n        <h3>\r\n          <b>Starlink</b> is a satellite internet constellation being\r\n          constructed by{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"www.spacex.com\">\r\n            SpaceX\r\n          </a>{\" \"}\r\n          providing satellite Internet access.\r\n        </h3>\r\n        <h4>Starlinks on the orbit: {props.starlinks.docs.length}</h4>\r\n      </div>\r\n      {globe}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    starlinks: state.starlink.starlinks,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchStarlink: () => dispatch(fetchStarlink()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Starlink);\r\n"],"sourceRoot":""}